name: Hold Docs Pr
on:
  # TODO: should this be `pull_request_target` for security?
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
  # TODO: this could target files instead of watching for a label.
  pull_request:
    types: [labeled]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # need to check out code to be able to use `gh` CLI (needs a .git directory to get remote)
      - name: Check out code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v6
        with:
          script: |
            const MERGE_LABEL = 'pr: automerge'
            const HOLD_LABEL = 'pr: hold'
            const DOCS_LABEL = 'pr: docs'

            if (context.payload.label.name === DOCS_LABEL) {
              const pr = context.payload.pull_request;
              const labelNames = pr.labels.map(l => l.name)
              console.log(`PR #${pr.number}: Docs PR found. Adding hold labels to prevent merge`);

              console.log('Labels', labelNames)

              const owner = context.payload.repository.owner;
              const ownerName = owner.login;
              const repo = context.payload.repository.name;

              // remove if exists
              if (labelNames.includes(MERGE_LABEL)) {
                console.log('removing automerge label')
                // https://octokit.github.io/rest.js/v18#issues-remove-label
                await github.rest.issues.removeLabel({
                  issue_number: pr.number,
                  owner: ownerName,
                  repo: repo,
                  name: MERGE_LABEL
                })
                console.log(res);
              } else {
                console.log(`"${MERGE_LABEL}" label already removed`)
              }

              console.log('------------------------');

              if (labelNames.includes(HOLD_LABEL)) {
                console.log(`"${HOLD_LABEL}" label already exists`)
              } else {
                console.log(`Adding "${HOLD_LABEL}" label`)
                // https://octokit.github.io/rest.js/v18#issues-add-labels
                const res = await github.rest.issues.addLabels({
                  issue_number: pr.number,
                  owner: ownerName,
                  repo: repo,
                  labels: [{ name: HOLD_LABEL }]
                });
                console.log(res);
              }
            } else {
              console.log(`${context.payload.label.name} label was applied, skipping this event`)
            }

      # - name: Update Labels
      #   shell: bash
      #   # TODO: the --label filter should only be for the release type from the upstream workflow...
      #   run: |
      #     DOCS_LABEL="\"pr: docs\""
      #     HOLD_LABEL="\"pr: hold\""
      #     AUTO_MERGE_LABEL="\"pr: automerge\""

      #     echo "[debug] Parsing PR number from $GITHUB_REF"

      #     # TODO: Figure out how to do this in bash, without Node
      #     PR_NUMBER=$(node -e "console.log(process.argv[1].split('/')[2])" $GITHUB_REF)
      #     echo "PR NUMBER: $PR_NUMBER"

      #     echo "========================="

      #     echo "[debug]: Fetching labels"
      #     labels=$(gh pr view "$PR_NUMBER" --json id,labels | jq .labels | jq -c '.[]' | jq .name)
      #     echo "[debug]: labels:"
      #     echo "$labels"

      #     echo "========================="

      #     echo "[debug] Looking for $DOCS_LABEL"


      #     hasLabel=$(node -e "console.log(process.argv[1].split(\n).includes("$DOCS_LABEL"))" $labels)

      #     hasLabel=0
      #     for l in "$labels"; do
      #       echo "[debug] Testing $l"
      #       if [ "$l" = "$DOCS_LABEL" ]; then
      #         echo "$l is the same as $DOCS_LABEL !"
      #         hasLabel=1
      #       else
      #         echo "$l is NOT the same as $DOCS_LABEL !"
      #       fi
      #       echo "-----------"
      #     done

      #     echo "========================="

      #     echo "PR#$PR_NUMBER has $DOCS_LABEL ? : $hasLabel"

      #     if [ $hasLabel = 1 ]; then
      #       echo "Adding $HOLD_LABEL label"
      #       gh pr edit "$PR_NUMBER" --add-label="$HOLD_LABEL"
      #     fi
